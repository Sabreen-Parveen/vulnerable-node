name: 🛡️ Scan Docker image latest 🐳

on:
  push:
    branches:
      - master

jobs:
  get_images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.generate.outputs.myoutput }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Generate Image Matrix
        id: generate
        run: |
          images=($(cat docker-compose.yml | grep -i "image:" | awk '{print $2}'))
          image=$(jq -c -n '$ARGS.positional' --args "${images[@]}")
          echo $image
          # echo "dimages=$(echo $image | jq -R .)" >> $GITHUB_OUTPUT  
          echo "myoutput=$(jq -cn --argjson environments $image '{images: $environments}')" >> $GITHUB_OUTPUT          

  # my_echo:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - get_images
  #   steps:
  #     - name: Echo previous outputs
  #       run: echo "${{ toJSON(needs.get_images.outputs.images) }}"

  scan:
    name: 🛡️ Scan image latest
    runs-on: ubuntu-latest
    needs: get_images
    # strategy:
    #   matrix: ${{ fromJSON(needs.get_images.outputs.images) }}
    steps:
      - uses: anchore/scan-action@v3
        id: scan
        with:
         image: grafana/promtail:2.2.0
         fail-build: true
         severity-cutoff: critical
         output-format: json

      - name: Create/Update an issue of vulnerabilities 🛡️ that have been detected
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
          script: |
            const fs = require('fs');
          
            let data = fs.readFileSync(`${{ steps.scan.outputs.json }}`, 'utf8');
            data = JSON.parse(data)
            console.log(typeof(data))
            data = data.matches;

            const { owner, repo } = context.repo;
            const labels = ['security', 'docker-scan', 'Alert : Docker image scan'];

            const vulnerabilities = data.map(item => item.vulnerability);

            // Extracting severities
            const severities = vulnerabilities.map(item => item.severity);

            // Counting the occurrences of each severity level
            const countBySeverity = severities.reduce((acc, severity) => {
              acc[severity] = (acc[severity] || 0) + 1;
              return acc;
            }, {});

            console.log("Count by Severity:", countBySeverity);

            let markdown = "| Image | Low | High | Medium | Critical | Scan Location |\n";
            markdown += "| --- | --- | --- | --- | --- | --- |\n";
            markdown += `| ${{ matrix.images }} |`;
            for (const severity of ["Low", "High", "Medium", "Critical"]) {
              markdown += ` ${countBySeverity[severity] || 0} |`;
            }
            markdown += " [CVE-2017-11671](https://security-tracker.debian.org/tracker/CVE-2017-11671) |\n";

            console.log(markdown);

            const body = `Workflow failed for commit ${{github.sha}}.
            Detected vulnerabilities in \`${{ matrix.images }}\` docker image.
            ${markdown}
                `;
            
             const response = await github.rest.issues.create({
              owner, repo,
              title : '🛡️ Docker image security scan failed 🛡️',
              body,
              labels
            });

            markdown = "";

            // Table headers
            markdown += "| Severity | Package | Version | Fix Version | Type | Location | Data Namespace | Link |\n";
            markdown += "| --- | --- | --- | --- | --- | --- | --- | --- |\n";
            let highVulnerabilityMarkdown = ""
            let criticalVulnerabilityMarkdown = ""
            let vulnerabilityMarkdown = ""
            data.forEach((match) => {
              if(match.vulnerability.severity == "High" ) {
                vulnerabilityMarkdown = `| ${match.vulnerability.severity} | ${match.artifact.name} | ${match.artifact.version} | ${match.vulnerability.fix.versions || ""} | ${match.artifact.type} | ${match.artifact.locations[0].path} | ${match.vulnerability.namespace} | [${match.vulnerability.id}](${match.vulnerability.dataSource}) |\n`;
                if (highVulnerabilityMarkdown.length + vulnerabilityMarkdown.length <= 1000) 
                    highVulnerabilityMarkdown += vulnerabilityMarkdown;
                }
              
                if(match.vulnerability.severity == "Critical") {
                    vulnerabilityMarkdown = `| ${match.vulnerability.severity} | ${match.artifact.name} | ${match.artifact.version} | ${match.vulnerability.fix.versions || ""} | ${match.artifact.type} | ${match.artifact.locations[0].path} | ${match.vulnerability.namespace} | [${match.vulnerability.id}](${match.vulnerability.dataSource}) |\n`;
                    if (criticalVulnerabilityMarkdown.length + vulnerabilityMarkdown.length <= 1000) 
                    criticalVulnerabilityMarkdown += vulnerabilityMarkdown;
                }
            });

            console.log("High Vul\n", markdown + highVulnerabilityMarkdown)
            console.log("Critical Vul\n", markdown + criticalVulnerabilityMarkdown)

            const commentSeverity = {
              "Critical": [criticalVulnerabilityMarkdown],
              "High": [highVulnerabilityMarkdown]
              }
            
            Object.entries(commentSeverity).forEach((severity) => {
              const [severityKey, severityValue] = severity
              const commentBody = `Workflow failed for commit ${{github.sha}}.

            Following ${severityKey} vulnerabilities have been detected :
                  ${severityValue}
                `;
                github.rest.issues.createComment({
                  issue_number: response.data.number,
                  owner, repo,
                  body: commentBody
                });
            })            


