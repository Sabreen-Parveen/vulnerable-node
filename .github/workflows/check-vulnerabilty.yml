name: üõ°Ô∏è Scan Docker image latest üê≥

on:
  push:
    branches:
      - master

jobs:
  get_images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.generate-image-matrix.outputs.images }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Generate Image Matrix
        id: generate-image-matrix
        run: |
          images=($(cat docker-compose.yml | grep -i "image:" | awk '{print $2}'))
          image=$(jq -c -n '{images: $ARGS.positional}' --args "${images[@]}")
          echo $image
          echo "images=$image" >> $GITHUB_OUTPUT  
          # delimiter="$(openssl rand -hex 8)"
          # echo "images<<${delimiter}" >> ${GITHUB_OUTPUT}
          # echo "${images[@]}" >> ${GITHUB_OUTPUT}
          # echo "${delimiter}" >> ${GITHUB_OUTPUT}  
          # echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"
          # echo "${images[@]}" | xargs | sed -e 's/ /, /g'
          # echo "images=${images[@]}" >> $GITHUB_OUTPUT  
          # for image in "${images[@]}"
          # do  
          #     echo $image
          #     echo "myoutput=$(jq -cn --argjson environments $TARGETS '{target: $environments}')" >> $GITHUB_OUTPUT          

          #     # echo "images=$image" >> $GITHUB_OUTPUT
          #     # delimiter="$(openssl rand -hex 8)"
          #     # echo "images<<${delimiter}" >> ${GITHUB_OUTPUT}
          #     # echo "${delimiter}" >> ${GITHUB_OUTPUT}         
          #     # echo "${image}" >> ${GITHUB_OUTPUT}
          #     # echo "${delimiter}" >> ${GITHUB_OUTPUT}     
          #     echo "images=$image" >> $GITHUB_OUTPUT  
          # done
          # echo "images=$(cat ./docker-compose.yml | grep -i "image:" | awk '{print $2}')" >> "$GITHUB_OUTPUT"
      # - name: sf Image Matrix
      #   id: generatef-image-matrix
      #   run: |
      #     echo "images=dfjkf" >> $GITHUB_OUTPUT  


  my_echo:
    runs-on: ubuntu-latest
    needs:
      - get_images
    steps:
      - name: Echo previous outputs
        run: echo "${{ fromJSON(needs.get_images.outputs) }}"

  scan:
    name: üõ°Ô∏è Scan image latest
    runs-on: ubuntu-latest
    needs: get_images
    strategy:
      matrix:
        images: ${{ fromJSON(needs.get_images.outputs.images) }}
    steps:
      - uses: anchore/scan-action@v3
        id: scan
        with:
         image: ${{ matrix.images }}
         fail-build: true
         severity-cutoff: critical

      - name: get the output
        if: ${{ failure() }}
        run: |
          # x=$(cat ${{ steps.scan.outputs.sarif }} | jq -r '.runs[0].tool.driver.rules[].shortDescription.text') 
          # x=$(echo $x | base64)
          echo "Let us see the output"
          echo $(cat ${{ steps.scan.outputs.sarif }})
          export result=$(cat ${{ steps.scan.outputs.sarif }} | jq -r '.runs[0].tool.driver.rules[].shortDescription.text')
          delimiter="$(openssl rand -hex 8)"
          echo "result<<${delimiter}" >> ${GITHUB_ENV}
          echo "${result}" >> ${GITHUB_ENV}
          echo "${delimiter}" >> ${GITHUB_ENV}
          # echo "result=$(cat ${{ steps.scan.outputs.sarif }} | jq -r '.runs[0].tool.driver.rules[].shortDescription.text')" >> "$GITHUB_ENV"
          # echo result=$(cat ${{ steps.scan.outputs.sarif }} | jq -r '.runs[0].tool.driver.rules[].shortDescription.text') >> $GITHUB_OUTPUT
          # echo $result
 
      - name: Create/Update an issue of vulnerabilities üõ°Ô∏è that have been detected
        if: ${{ failure() && env.result}} 
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
          script: |
            const { owner, repo } = context.repo;
            const labels = ['security', 'docker-scan', 'Alert : Docker image scan'];

            const body = `Workflow failed for commit ${{github.sha}}.        

            Following vulnerabilities have been detected :
            \`\`\`
            ${{ env.result }}
            \`\`\`
                `;
            console.log(process.env.result);
            console.log(body);

            github.rest.issues.create({
              owner, repo,
              title : 'üõ°Ô∏è Docker image security scan failed üõ°Ô∏è',
              body,
              labels
            });
